
@inproceedings{chen2016,
  title = {Detecting Code Smells in {{Python}} Programs},
  booktitle = {2016 International Conference on {{Software Analysis}}, {{Testing}} and {{Evolution}} ({{SATE}})},
  author = {Chen, Zhifei and Chen, Lin and Ma, Wanwangying and Xu, Baowen},
  date = {2016},
  pages = {18--23},
  publisher = {{IEEE}},
  file = {/data/nextcloud/bachelorarbeit/sources/Chen et al/Chen et al_2016_Detecting code smells in Python programs.pdf}
}

@book{fowler2018,
  title = {Refactoring: {{Improving}} the {{Design}} of {{Existing Code}}},
  shorttitle = {Refactoring},
  author = {Fowler, Martin},
  date = {2018-11-30},
  edition = {2nd edition},
  publisher = {{Addison-Wesley Professional}},
  location = {{Boston}},
  isbn = {978-0-13-475759-9},
  langid = {english},
  pagetotal = {448},
  file = {/data/nextcloud/bachelorarbeit/sources/Fowler/Fowler_2018_Refactoring.pdf}
}

@inproceedings{kim2012,
  title = {A Field Study of Refactoring Challenges and Benefits},
  booktitle = {Proceedings of the {{ACM SIGSOFT}} 20th {{International Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
  date = {2012-11-11},
  series = {{{FSE}} '12},
  pages = {1--11},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2393596.2393655},
  url = {https://doi.org/10.1145/2393596.2393655},
  urldate = {2022-03-09},
  abstract = {It is widely believed that refactoring improves software quality and developer productivity. However, few empirical studies quantitatively assess refactoring benefits or investigate developers' perception towards these benefits. This paper presents a field study of refactoring benefits and challenges at Microsoft through three complementary study methods: a survey, semi-structured interviews with professional software engineers, and quantitative analysis of version history data. Our survey finds that the refactoring definition in practice is not confined to a rigorous definition of semantics-preserving code transformations and that developers perceive that refactoring involves substantial cost and risks. We also report on interviews with a designated refactoring team that has led a multi-year, centralized effort on refactoring Windows. The quantitative analysis of Windows 7 version history finds that the binary modules refactored by this team experienced significant reduction in the number of inter-module dependencies and post-release defects, indicating a visible benefit of refactoring.},
  isbn = {978-1-4503-1614-9},
  keywords = {churn,component dependencies,defects,empirical study,refactoring,software evolution},
  file = {/data/nextcloud/bachelorarbeit/sources/Kim et al/Kim et al_2012_A field study of refactoring challenges and benefits.pdf}
}

@article{lacerda2020,
  title = {Code Smells and Refactoring: {{A}} Tertiary Systematic Review of Challenges and Observations},
  shorttitle = {Code Smells and Refactoring},
  author = {Lacerda, Guilherme and Petrillo, Fabio and Pimenta, Marcelo and Guéhéneuc, Yann Gaël},
  date = {2020-09-01},
  journaltitle = {Journal of Systems and Software},
  shortjournal = {Journal of Systems and Software},
  volume = {167},
  pages = {110610},
  issn = {0164-1212},
  doi = {10.1016/j.jss.2020.110610},
  url = {https://www.sciencedirect.com/science/article/pii/S0164121220300881},
  urldate = {2022-03-08},
  abstract = {Refactoring and smells have been well researched by the software-engineering research community these past decades. Several secondary studies have been published on code smells, discussing their implications on software quality, their impact on maintenance and evolution, and existing tools for their detection. Other secondary studies addressed refactoring, discussing refactoring techniques, opportunities for refactoring, impact on quality, and tools support. In this paper, we present a tertiary systematic literature review of previous surveys, secondary systematic literature reviews, and systematic mappings. We identify the main observations (what we know) and challenges (what we do not know) on code smells and refactoring. We perform this tertiary review using eight scientific databases, based on a set of five research questions, identifying 40 secondary studies between 1992 and 2018. We organize the main observations and challenges about code smell and their refactoring into: smells definitions, most common code-smell detection approaches, code-smell detection tools, most common refactoring, and refactoring tools. We show that code smells and refactoring have a strong relationship with quality attributes, i.e., with understandability, maintainability, testability, complexity, functionality, and reusability. We argue that code smells and refactoring could be considered as the two faces of a same coin. Besides, we identify how refactoring affects quality attributes, more than code smells. We also discuss the implications of this work for practitioners, researchers, and instructors. We identify 13 open issues that could guide future research work. Thus, we want to highlight the gap between code smells and refactoring in the current state of software-engineering research. We wish that this work could help the software-engineering research community in collaborating on future work on code smells and refactoring.},
  langid = {english},
  keywords = {Code smells,Refactoring,Tertiary systematic review},
  file = {/data/nextcloud/bachelorarbeit/sources/Lacerda et al/Lacerda et al_2020_Code smells and refactoring.pdf;/data/nextcloud/bachelorarbeit/sources/Lacerda et al/Lacerda et al_2020_Code smells and refactoring2.pdf;/home/fabian/Zotero/storage/2JV42PS8/S0164121220300881.html}
}

@book{martin2008,
  title = {Clean {{Code}}: {{A Handbook}} of {{Agile Software Craftsmanship}}},
  shorttitle = {Clean {{Code}}},
  author = {Martin, Robert},
  date = {2008-08-01},
  edition = {1st edition},
  publisher = {{Prentice Hall}},
  location = {{Upper Saddle River, NJ}},
  isbn = {978-0-13-235088-4},
  langid = {english},
  pagetotal = {464},
  file = {/data/nextcloud/bachelorarbeit/sources/Martin/Martin_2008_Clean Code.pdf}
}

@article{mens2003,
  title = {Refactoring: {{Current Research}} and {{Future Trends}}},
  shorttitle = {Refactoring},
  author = {Mens, Tom and Demeyer, Serge and Du Bois, Bart and Stenten, Hans and Van Gorp, Pieter},
  date = {2003-12-01},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  series = {{{LDTA}}'2003 - {{Language}} Descriptions, {{Tools}} and {{Applications}}},
  volume = {82},
  number = {3},
  pages = {483--499},
  issn = {1571-0661},
  doi = {10.1016/S1571-0661(05)82624-6},
  url = {https://www.sciencedirect.com/science/article/pii/S1571066105826246},
  urldate = {2022-03-09},
  abstract = {In this paper we provide an detailed overview of existing research in the field of software restructuring and refactoring, from a formal as well as a practical point of view. Next, we propose an extensive list of open questions that indicate future research directions, and we provide some partial answers to these questions.},
  langid = {english},
  file = {/data/nextcloud/bachelorarbeit/sources/Mens et al/Mens et al_2003_Refactoring.pdf;/home/fabian/Zotero/storage/BT56SWF6/S1571066105826246.html}
}

@inproceedings{sonnleithner2021,
  title = {Do You Smell It Too? {{Towards Bad Smells}} in {{IEC}} 61499 {{Applications}}},
  shorttitle = {Do You Smell It Too?},
  booktitle = {2021 26th {{IEEE International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}} )},
  author = {Sonnleithner, Lisa and Oberlehner, Michael and Kutsia, Elene and Zoitl, Alois and Bacsi, Sandor},
  date = {2021-09-07},
  pages = {1--4},
  publisher = {{IEEE}},
  location = {{Vasteras, Sweden}},
  doi = {10.1109/ETFA45728.2021.9613379},
  url = {https://ieeexplore.ieee.org/document/9613379/},
  urldate = {2022-03-08},
  abstract = {Bad Smells are certain suboptimal structures or patterns in software. They can cause maintenance issues and hinder understandability. Therefore, it is essential to avoid Bad Smells in software. While the topic is well researched in other fields, it is still an open issue in industrial automation. In this work, we are taking a step towards closing that gap and propose a catalog of IEC 61499 Bad Smells.},
  eventtitle = {2021 {{IEEE}} 26th {{International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}})},
  isbn = {978-1-72812-989-1},
  langid = {english},
  file = {/data/nextcloud/bachelorarbeit/sources/Sonnleithner et al/Sonnleithner et al_2021_Do you smell it too.pdf}
}


