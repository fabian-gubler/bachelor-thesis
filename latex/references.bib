
@article{alkhazi2020,
  title = {On the Value of Quality Attributes for Refactoring {{ATL}} Model Transformations: {{A}} Multi-Objective Approach},
  shorttitle = {On the Value of Quality Attributes for Refactoring {{ATL}} Model Transformations},
  author = {Alkhazi, Bader and Abid, Chaima and Kessentini, Marouane and Wimmer, Manuel},
  date = {2020-04},
  journaltitle = {Information and Software Technology},
  shortjournal = {Information and Software Technology},
  volume = {120},
  pages = {106243},
  issn = {09505849},
  doi = {10.1016/j.infsof.2019.106243},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0950584919302617},
  urldate = {2022-03-30},
  abstract = {Objective: In this paper, we propose a novel set of quality attributes to evaluate refactored ATL programs based on the hierarchical quality model QMOOD. Method: We used the proposed quality attributes to guide the selection of the best refactorings to improve ATL programs using multi-objective search. Results: We validate our approach on a comprehensive dataset of model transformations. The statistical analysis of our experiments on 30 runs shows that our automated approach recommended useful refactorings based on a benchmark of ATL transformations and compared to random search, mono-objective search formulation, a previous work based on a different formulation of multi-objective search with few quality metrics, and a semiautomated refactoring approach not based on heuristic search. Conclusion: All these existing studies did not use our QMOOD adaptation for ATL which confirms the relevance of our quality attributes to guide the search for good refactoring suggestions.},
  langid = {english},
  file = {/home/fabian/Zotero/storage/CKHGQJHA/Alkhazi et al. - 2020 - On the value of quality attributes for refactoring.pdf}
}

@book{bass1998,
  title = {Software Architecture in Practice},
  author = {Bass, Len},
  date = {1998},
  publisher = {{Addison-Wesley}},
  location = {{Reading, Mass}},
  isbn = {978-0-201-19930-7},
  langid = {english},
  pagetotal = {xxiii, 452},
  keywords = {Software architecture.,System design.},
  annotation = {Open Library ID: OL668208M}
}

@article{buse2010,
  title = {Learning a {{Metric}} for {{Code Readability}}},
  author = {Buse, Raymond P.L. and Weimer, Westley R.},
  date = {2010-07},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {36},
  number = {4},
  pages = {546--558},
  issn = {1939-3520},
  doi = {10.1109/TSE.2009.70},
  abstract = {In this paper, we explore the concept of code readability and investigate its relation to software quality. With data collected from 120 human annotators, we derive associations between a simple set of local code features and human notions of readability. Using those features, we construct an automated readability measure and show that it can be 80 percent effective and better than a human, on average, at predicting readability judgments. Furthermore, we show that this metric correlates strongly with three measures of software quality: code changes, automated defect reports, and defect log messages. We measure these correlations on over 2.2 million lines of code, as well as longitudinally, over many releases of selected projects. Finally, we discuss the implications of this study on programming language design and engineering practice. For example, our data suggest that comments, in and of themselves, are less important than simple blank lines to local judgments of readability.},
  eventtitle = {{{IEEE Transactions}} on {{Software Engineering}}},
  keywords = {code metrics,Computer languages,Costs,Design engineering,Documentation,FindBugs.,Humans,machine learning,Machine learning,program understanding,Readability metrics,software maintenance,Software maintenance,Software measurement,Software quality,Software readability},
  file = {/home/fabian/nextcloud/bachelorarbeit/sources/Buse_Weimer/Buse_Weimer_2010_Learning a Metric for Code Readability.pdf;/home/fabian/Zotero/storage/T7UTHIBU/5332232.html}
}

@inproceedings{chen2016,
  title = {Detecting Code Smells in {{Python}} Programs},
  booktitle = {2016 International Conference on {{Software Analysis}}, {{Testing}} and {{Evolution}} ({{SATE}})},
  author = {Chen, Zhifei and Chen, Lin and Ma, Wanwangying and Xu, Baowen},
  date = {2016},
  pages = {18--23},
  publisher = {{IEEE}},
  file = {/data/nextcloud/bachelorarbeit/sources/Chen et al/Chen et al_2016_Detecting code smells in Python programs.pdf}
}

@book{fowler2018,
  title = {Refactoring: {{Improving}} the {{Design}} of {{Existing Code}}},
  shorttitle = {Refactoring},
  author = {Fowler, Martin},
  date = {2018-11-30},
  edition = {2nd edition},
  publisher = {{Addison-Wesley Professional}},
  location = {{Boston}},
  isbn = {978-0-13-475759-9},
  langid = {english},
  pagetotal = {448},
  file = {/data/nextcloud/bachelorarbeit/sources/Fowler/Fowler_2018_Refactoring.pdf}
}

@online{fowlerrobert,
  title = {Technical {{Debt}}},
  shorttitle = {Bliki},
  author = {Fowler, Robert},
  url = {https://martinfowler.com/bliki/TechnicalDebt.html},
  urldate = {2022-05-09},
  abstract = {Technical Debt is a metaphor for the consequences of cruft. You either have to accept a drag on further features (paying interest) or fix the software (paying the principal)},
  organization = {{martinfowler.com}},
  file = {/home/fabian/Zotero/storage/IZV76RIL/TechnicalDebt.html}
}

@inproceedings{kim2012,
  title = {A Field Study of Refactoring Challenges and Benefits},
  booktitle = {Proceedings of the {{ACM SIGSOFT}} 20th {{International Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
  date = {2012-11-11},
  series = {{{FSE}} '12},
  pages = {1--11},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2393596.2393655},
  url = {https://doi.org/10.1145/2393596.2393655},
  urldate = {2022-03-09},
  abstract = {It is widely believed that refactoring improves software quality and developer productivity. However, few empirical studies quantitatively assess refactoring benefits or investigate developers' perception towards these benefits. This paper presents a field study of refactoring benefits and challenges at Microsoft through three complementary study methods: a survey, semi-structured interviews with professional software engineers, and quantitative analysis of version history data. Our survey finds that the refactoring definition in practice is not confined to a rigorous definition of semantics-preserving code transformations and that developers perceive that refactoring involves substantial cost and risks. We also report on interviews with a designated refactoring team that has led a multi-year, centralized effort on refactoring Windows. The quantitative analysis of Windows 7 version history finds that the binary modules refactored by this team experienced significant reduction in the number of inter-module dependencies and post-release defects, indicating a visible benefit of refactoring.},
  isbn = {978-1-4503-1614-9},
  keywords = {churn,component dependencies,defects,empirical study,refactoring,software evolution},
  file = {/data/nextcloud/bachelorarbeit/sources/Kim et al/Kim et al_2012_A field study of refactoring challenges and benefits.pdf}
}

@article{kruchten2012,
  title = {Technical {{Debt}}: {{From Metaphor}} to {{Theory}} and {{Practice}}},
  shorttitle = {Technical {{Debt}}},
  author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
  date = {2012-11},
  journaltitle = {IEEE Software},
  volume = {29},
  number = {6},
  pages = {18--21},
  issn = {1937-4194},
  doi = {10.1109/MS.2012.167},
  abstract = {The metaphor of technical debt in software development was introduced two decades ago to explain to nontechnical stakeholders the need for what we call now "refactoring." As the term is being used to describe a wide range of phenomena, this paper proposes an organization of the technical debt landscape, and introduces the papers on technical debt contained in the issue.},
  eventtitle = {{{IEEE Software}}},
  keywords = {evolvability,Investments,maintainability,refactoring,Risk management,Software maintenance,software quality,Software quality,Sofware testing,technical debt},
  file = {/home/fabian/nextcloud/bachelorarbeit/sources/Kruchten et al/Kruchten et al_2012_Technical Debt.pdf;/home/fabian/Zotero/storage/JH3GWQH3/6336722.html}
}

@article{lacerda2020,
  title = {Code Smells and Refactoring: {{A}} Tertiary Systematic Review of Challenges and Observations},
  shorttitle = {Code Smells and Refactoring},
  author = {Lacerda, Guilherme and Petrillo, Fabio and Pimenta, Marcelo and Guéhéneuc, Yann Gaël},
  date = {2020-09-01},
  journaltitle = {Journal of Systems and Software},
  shortjournal = {Journal of Systems and Software},
  volume = {167},
  pages = {110610},
  issn = {0164-1212},
  doi = {10.1016/j.jss.2020.110610},
  url = {https://www.sciencedirect.com/science/article/pii/S0164121220300881},
  urldate = {2022-03-08},
  abstract = {Refactoring and smells have been well researched by the software-engineering research community these past decades. Several secondary studies have been published on code smells, discussing their implications on software quality, their impact on maintenance and evolution, and existing tools for their detection. Other secondary studies addressed refactoring, discussing refactoring techniques, opportunities for refactoring, impact on quality, and tools support. In this paper, we present a tertiary systematic literature review of previous surveys, secondary systematic literature reviews, and systematic mappings. We identify the main observations (what we know) and challenges (what we do not know) on code smells and refactoring. We perform this tertiary review using eight scientific databases, based on a set of five research questions, identifying 40 secondary studies between 1992 and 2018. We organize the main observations and challenges about code smell and their refactoring into: smells definitions, most common code-smell detection approaches, code-smell detection tools, most common refactoring, and refactoring tools. We show that code smells and refactoring have a strong relationship with quality attributes, i.e., with understandability, maintainability, testability, complexity, functionality, and reusability. We argue that code smells and refactoring could be considered as the two faces of a same coin. Besides, we identify how refactoring affects quality attributes, more than code smells. We also discuss the implications of this work for practitioners, researchers, and instructors. We identify 13 open issues that could guide future research work. Thus, we want to highlight the gap between code smells and refactoring in the current state of software-engineering research. We wish that this work could help the software-engineering research community in collaborating on future work on code smells and refactoring.},
  langid = {english},
  keywords = {Code smells,Refactoring,Tertiary systematic review},
  file = {/data/nextcloud/bachelorarbeit/sources/Lacerda et al/Lacerda et al_2020_Code smells and refactoring.pdf;/data/nextcloud/bachelorarbeit/sources/Lacerda et al/Lacerda et al_2020_Code smells and refactoring2.pdf;/home/fabian/Zotero/storage/2JV42PS8/S0164121220300881.html}
}

@book{martin2008,
  title = {Clean {{Code}}: {{A Handbook}} of {{Agile Software Craftsmanship}}},
  shorttitle = {Clean {{Code}}},
  author = {Martin, Robert},
  date = {2008-08-01},
  edition = {1st edition},
  publisher = {{Prentice Hall}},
  location = {{Upper Saddle River, NJ}},
  isbn = {978-0-13-235088-4},
  langid = {english},
  pagetotal = {464},
  file = {/data/nextcloud/bachelorarbeit/sources/Martin/Martin_2008_Clean Code.pdf}
}

@article{mens2003,
  title = {Refactoring: {{Current Research}} and {{Future Trends}}},
  shorttitle = {Refactoring},
  author = {Mens, Tom and Demeyer, Serge and Du Bois, Bart and Stenten, Hans and Van Gorp, Pieter},
  date = {2003-12-01},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  series = {{{LDTA}}'2003 - {{Language}} Descriptions, {{Tools}} and {{Applications}}},
  volume = {82},
  number = {3},
  pages = {483--499},
  issn = {1571-0661},
  doi = {10.1016/S1571-0661(05)82624-6},
  url = {https://www.sciencedirect.com/science/article/pii/S1571066105826246},
  urldate = {2022-03-09},
  abstract = {In this paper we provide an detailed overview of existing research in the field of software restructuring and refactoring, from a formal as well as a practical point of view. Next, we propose an extensive list of open questions that indicate future research directions, and we provide some partial answers to these questions.},
  langid = {english},
  file = {/data/nextcloud/bachelorarbeit/sources/Mens et al/Mens et al_2003_Refactoring.pdf;/home/fabian/Zotero/storage/BT56SWF6/S1571066105826246.html}
}

@article{mens2004,
  title = {A Survey of Software Refactoring},
  author = {Mens, T. and Tourwé, T.},
  date = {2004},
  journaltitle = {IEEE Transactions on Software Engineering},
  doi = {10.1109/TSE.2004.1265817},
  abstract = {This research is compared and discussed based on a number of different criteria: the refactoring activities that are supported, the specific techniques and formalisms that are used for supporting these activities, the types of software artifacts that are being refactored, the important issues that need to be taken into account when buildingRefactoring tool support, and the effect of refactors on the software process. We provide an extensive overview of existing research in the field of software refactoring. This research is compared and discussed based on a number of different criteria: the refactoring activities that are supported, the specific techniques and formalisms that are used for supporting these activities, the types of software artifacts that are being refactored, the important issues that need to be taken into account when building refactoring tool support, and the effect of refactoring on the software process. A running example is used to explain and illustrate the main concepts.},
  file = {/data/nextcloud/bachelorarbeit/sources/Mens et al/Mens et al_2004_A survey of software refactoring.pdf}
}

@book{menshawy2021,
  title = {Code {{Smells}} and {{Detection Techniques}}: {{A Survey}}},
  shorttitle = {Code {{Smells}} and {{Detection Techniques}}},
  author = {Menshawy, Rana and Hassan Yousef, Ahmed and Salem, Ashraf},
  date = {2021-05-26},
  pages = {83},
  doi = {10.1109/MIUCC52538.2021.9447669},
  pagetotal = {78},
  note = {cit. on p.1},
}

@inproceedings{sonnleithner2021,
  title = {Do You Smell It Too? {{Towards Bad Smells}} in {{IEC}} 61499 {{Applications}}},
  shorttitle = {Do You Smell It Too?},
  booktitle = {2021 26th {{IEEE International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}} )},
  author = {Sonnleithner, Lisa and Oberlehner, Michael and Kutsia, Elene and Zoitl, Alois and Bacsi, Sandor},
  date = {2021-09-07},
  pages = {1--4},
  publisher = {{IEEE}},
  location = {{Vasteras, Sweden}},
  doi = {10.1109/ETFA45728.2021.9613379},
  url = {https://ieeexplore.ieee.org/document/9613379/},
  urldate = {2022-03-08},
  abstract = {Bad Smells are certain suboptimal structures or patterns in software. They can cause maintenance issues and hinder understandability. Therefore, it is essential to avoid Bad Smells in software. While the topic is well researched in other fields, it is still an open issue in industrial automation. In this work, we are taking a step towards closing that gap and propose a catalog of IEC 61499 Bad Smells.},
  eventtitle = {2021 {{IEEE}} 26th {{International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}})},
  isbn = {978-1-72812-989-1},
  langid = {english},
  file = {/data/nextcloud/bachelorarbeit/sources/Sonnleithner et al/Sonnleithner et al_2021_Do you smell it too.pdf}
}

@article{tom2013,
  title = {An Exploration of Technical Debt},
  author = {Tom, Edith and Aurum, Aybüke and Vidgen, Richard},
  date = {2013-06-01},
  journaltitle = {Journal of Systems and Software},
  shortjournal = {Journal of Systems and Software},
  volume = {86},
  number = {6},
  pages = {1498--1516},
  issn = {0164-1212},
  doi = {10.1016/j.jss.2012.12.052},
  url = {https://www.sciencedirect.com/science/article/pii/S0164121213000022},
  urldate = {2022-05-09},
  abstract = {Context Whilst technical debt is considered to be detrimental to the long term success of software development, it appears to be poorly understood in academic literature. The absence of a clear definition and model for technical debt exacerbates the challenge of its identification and adequate management, thus preventing the realisation of technical debt's utility as a conceptual and technical communication device. Objective To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development. Method An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon. Result A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon. Conclusion The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt.},
  langid = {english},
  keywords = {Benefits and drawbacks,Code debt,Multivocal literature review,Outcomes,Precedents,Technical debt},
  file = {/home/fabian/nextcloud/bachelorarbeit/sources/Tom et al/Tom et al_2013_An exploration of technical debt.pdf;/home/fabian/Zotero/storage/SAENWDY7/S0164121213000022.html}
}

@online{zotero-undefined,
  title = {Technical {{Debt Quadrant}}},
  shorttitle = {Bliki},
  url = {https://martinfowler.com/bliki/TechnicalDebtQuadrant.html},
  urldate = {2022-05-09},
  abstract = {People argue about whether some kinds of bad code count as Technical Debt. I prefer to focus on the interest/principal decision, and recognize debt has different causes.},
  organization = {{martinfowler.com}},
  file = {/home/fabian/Zotero/storage/3NW8HVQQ/TechnicalDebtQuadrant.html}
}

@online{zotero-undefinedb,
  title = {An Exploration of Technical Debt | {{Elsevier Enhanced Reader}}},
  doi = {10.1016/j.jss.2012.12.052},
  url = {https://reader.elsevier.com/reader/sd/pii/S0164121213000022?token=1AA8D79D3702BFC4DFC93F052F86FB37E15224F3B0672AD8B1787AC9E3AC904311396E3691EF37F8977E850E46313D34&originRegion=eu-west-1&originCreation=20220509072935},
  urldate = {2022-05-09},
  langid = {english},
  file = {/home/fabian/Zotero/storage/BGXDKU5B/S0164121213000022.html}
}


